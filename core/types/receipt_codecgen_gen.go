//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package types

import (
	"errors"
	pkg1_common "github.com/ledgerwatch/erigon-lib/common"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_big "math/big"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF82 = 1
	codecSelferCcRAW2  = 255
	// ----- value types used ----
	codecSelferValueTypeArray2     = 10
	codecSelferValueTypeMap2       = 9
	codecSelferValueTypeString2    = 6
	codecSelferValueTypeInt2       = 2
	codecSelferValueTypeUint2      = 3
	codecSelferValueTypeFloat2     = 4
	codecSelferValueTypeNil2       = 1
	codecSelferBitsize2            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil2 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2 struct{}

func codecSelfer2False() bool { return false }
func codecSelfer2True() bool  { return true }

func init() {
	if codec1978.GenVersion != 19 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 19, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_common.Address
		var _ pkg2_big.Int
	}
}

func (x *Receipt) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(*x)
		} else {
			yy2arr2 := z.EncBasicHandle().StructToArray
			_ = yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn7 bool = x.L1GasPrice == nil
			var yyn8 bool = x.L1GasUsed == nil
			var yyn9 bool = x.L1Fee == nil
			var yyn10 bool = x.FeeScalar == nil
			var yyn11 bool = x.DepositNonce == nil
			var yyn12 bool = x.DepositReceiptVersion == nil
			var yyn13 bool = x.L1BlobBaseFee == nil
			var yyn14 bool = x.L1BaseFeeScalar == nil
			var yyn15 bool = x.L1BlobBaseFeeScalar == nil
			z.EncWriteArrayStart(13)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Type))
			z.EncWriteArrayElem()
			if x.PostState == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.PostState))
			} // end block: if x.PostState slice == nil
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Status))
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.CumulativeGasUsed))
			if yyn7 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.L1GasPrice)
				} else {
					z.EncFallback(x.L1GasPrice)
				}
			}
			if yyn8 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.L1GasUsed)
				} else {
					z.EncFallback(x.L1GasUsed)
				}
			}
			if yyn9 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.L1Fee)
				} else {
					z.EncFallback(x.L1Fee)
				}
			}
			if yyn10 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if !z.EncBinary() {
					z.EncTextMarshal(x.FeeScalar)
				} else {
					z.EncFallback(x.FeeScalar)
				}
			}
			if yyn11 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy24 := *x.DepositNonce
				r.EncodeUint(uint64(yy24))
			}
			if yyn12 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy26 := *x.DepositReceiptVersion
				r.EncodeUint(uint64(yy26))
			}
			if yyn13 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.L1BlobBaseFee)
				} else {
					z.EncFallback(x.L1BlobBaseFee)
				}
			}
			if yyn14 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy29 := *x.L1BaseFeeScalar
				r.EncodeUint(uint64(yy29))
			}
			if yyn15 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy31 := *x.L1BlobBaseFeeScalar
				r.EncodeUint(uint64(yy31))
			}
			z.EncWriteArrayEnd()
		}
	}
}

func (x *Receipt) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil2 {
			*(x) = Receipt{}
		} else if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *Receipt) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "Type":
			x.Type = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		case "1":
			x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
		case "2":
			x.Status = (uint64)(r.DecodeUint64())
		case "3":
			x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
		case "L1GasPrice":
			if r.TryNil() {
				if x.L1GasPrice != nil { // remove the if-true
					x.L1GasPrice = nil
				}
			} else {
				if x.L1GasPrice == nil {
					x.L1GasPrice = new(pkg2_big.Int)
				}
				if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.L1GasPrice)
				} else {
					z.DecFallback(x.L1GasPrice, false)
				}
			}
		case "L1GasUsed":
			if r.TryNil() {
				if x.L1GasUsed != nil { // remove the if-true
					x.L1GasUsed = nil
				}
			} else {
				if x.L1GasUsed == nil {
					x.L1GasUsed = new(pkg2_big.Int)
				}
				if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.L1GasUsed)
				} else {
					z.DecFallback(x.L1GasUsed, false)
				}
			}
		case "L1Fee":
			if r.TryNil() {
				if x.L1Fee != nil { // remove the if-true
					x.L1Fee = nil
				}
			} else {
				if x.L1Fee == nil {
					x.L1Fee = new(pkg2_big.Int)
				}
				if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.L1Fee)
				} else {
					z.DecFallback(x.L1Fee, false)
				}
			}
		case "FeeScalar":
			if r.TryNil() {
				if x.FeeScalar != nil { // remove the if-true
					x.FeeScalar = nil
				}
			} else {
				if x.FeeScalar == nil {
					x.FeeScalar = new(pkg2_big.Float)
				}
				if !z.DecBinary() {
					z.DecTextUnmarshal(x.FeeScalar)
				} else {
					z.DecFallback(x.FeeScalar, false)
				}
			}
		case "DepositNonce":
			if r.TryNil() {
				if x.DepositNonce != nil { // remove the if-true
					x.DepositNonce = nil
				}
			} else {
				if x.DepositNonce == nil {
					x.DepositNonce = new(uint64)
				}
				*x.DepositNonce = (uint64)(r.DecodeUint64())
			}
		case "DepositReceiptVersion":
			if r.TryNil() {
				if x.DepositReceiptVersion != nil { // remove the if-true
					x.DepositReceiptVersion = nil
				}
			} else {
				if x.DepositReceiptVersion == nil {
					x.DepositReceiptVersion = new(uint64)
				}
				*x.DepositReceiptVersion = (uint64)(r.DecodeUint64())
			}
		case "L1BlobBaseFee":
			if r.TryNil() {
				if x.L1BlobBaseFee != nil { // remove the if-true
					x.L1BlobBaseFee = nil
				}
			} else {
				if x.L1BlobBaseFee == nil {
					x.L1BlobBaseFee = new(pkg2_big.Int)
				}
				if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.L1BlobBaseFee)
				} else {
					z.DecFallback(x.L1BlobBaseFee, false)
				}
			}
		case "L1BaseFeeScalar":
			if r.TryNil() {
				if x.L1BaseFeeScalar != nil { // remove the if-true
					x.L1BaseFeeScalar = nil
				}
			} else {
				if x.L1BaseFeeScalar == nil {
					x.L1BaseFeeScalar = new(uint64)
				}
				*x.L1BaseFeeScalar = (uint64)(r.DecodeUint64())
			}
		case "L1BlobBaseFeeScalar":
			if r.TryNil() {
				if x.L1BlobBaseFeeScalar != nil { // remove the if-true
					x.L1BlobBaseFeeScalar = nil
				}
			} else {
				if x.L1BlobBaseFeeScalar == nil {
					x.L1BlobBaseFeeScalar = new(uint64)
				}
				*x.L1BlobBaseFeeScalar = (uint64)(r.DecodeUint64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Receipt) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Type = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.PostState = r.DecodeBytes(([]byte)(x.PostState), false)
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Status = (uint64)(r.DecodeUint64())
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CumulativeGasUsed = (uint64)(r.DecodeUint64())
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1GasPrice != nil { // remove the if-true
			x.L1GasPrice = nil
		}
	} else {
		if x.L1GasPrice == nil {
			x.L1GasPrice = new(pkg2_big.Int)
		}
		if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.L1GasPrice)
		} else {
			z.DecFallback(x.L1GasPrice, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1GasUsed != nil { // remove the if-true
			x.L1GasUsed = nil
		}
	} else {
		if x.L1GasUsed == nil {
			x.L1GasUsed = new(pkg2_big.Int)
		}
		if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.L1GasUsed)
		} else {
			z.DecFallback(x.L1GasUsed, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1Fee != nil { // remove the if-true
			x.L1Fee = nil
		}
	} else {
		if x.L1Fee == nil {
			x.L1Fee = new(pkg2_big.Int)
		}
		if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.L1Fee)
		} else {
			z.DecFallback(x.L1Fee, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.FeeScalar != nil { // remove the if-true
			x.FeeScalar = nil
		}
	} else {
		if x.FeeScalar == nil {
			x.FeeScalar = new(pkg2_big.Float)
		}
		if !z.DecBinary() {
			z.DecTextUnmarshal(x.FeeScalar)
		} else {
			z.DecFallback(x.FeeScalar, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.DepositNonce != nil { // remove the if-true
			x.DepositNonce = nil
		}
	} else {
		if x.DepositNonce == nil {
			x.DepositNonce = new(uint64)
		}
		*x.DepositNonce = (uint64)(r.DecodeUint64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.DepositReceiptVersion != nil { // remove the if-true
			x.DepositReceiptVersion = nil
		}
	} else {
		if x.DepositReceiptVersion == nil {
			x.DepositReceiptVersion = new(uint64)
		}
		*x.DepositReceiptVersion = (uint64)(r.DecodeUint64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1BlobBaseFee != nil { // remove the if-true
			x.L1BlobBaseFee = nil
		}
	} else {
		if x.L1BlobBaseFee == nil {
			x.L1BlobBaseFee = new(pkg2_big.Int)
		}
		if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.L1BlobBaseFee)
		} else {
			z.DecFallback(x.L1BlobBaseFee, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1BaseFeeScalar != nil { // remove the if-true
			x.L1BaseFeeScalar = nil
		}
	} else {
		if x.L1BaseFeeScalar == nil {
			x.L1BaseFeeScalar = new(uint64)
		}
		*x.L1BaseFeeScalar = (uint64)(r.DecodeUint64())
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = z.DecCheckBreak()
	}
	if yyb27 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.L1BlobBaseFeeScalar != nil { // remove the if-true
			x.L1BlobBaseFeeScalar = nil
		}
	} else {
		if x.L1BlobBaseFeeScalar == nil {
			x.L1BlobBaseFeeScalar = new(uint64)
		}
		*x.L1BlobBaseFeeScalar = (uint64)(r.DecodeUint64())
	}
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = z.DecCheckBreak()
		}
		if yyb27 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj27-1, "")
	}
}

func (x *Receipt) IsCodecEmpty() bool {
	return !(x.Type != 0 && len(x.PostState) != 0 && x.Status != 0 && x.CumulativeGasUsed != 0 && true)
}

func (x Receipts) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encReceipts((Receipts)(x), e)
	} // end block: if x slice == nil
}

func (x *Receipts) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decReceipts((*Receipts)(x), d)
}

func (x *Log) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if !z.EncBinary() && z.IsJSONHandle() {
			z.EncJSONMarshal(*x)
		} else {
			yy2arr2 := z.EncBasicHandle().StructToArray
			_ = yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			yy6 := &x.Address
			if !z.EncBinary() {
				z.EncTextMarshal(*yy6)
			} else {
				h.enccommon_Address((*pkg1_common.Address)(yy6), e)
			}
			z.EncWriteArrayElem()
			if x.Topics == nil {
				r.EncodeNil()
			} else {
				h.encSlicecommon_Hash(([]pkg1_common.Hash)(x.Topics), e)
			} // end block: if x.Topics slice == nil
			z.EncWriteArrayElem()
			if x.Data == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Data))
			} // end block: if x.Data slice == nil
			z.EncWriteArrayEnd()
		}
	}
}

func (x *Log) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeNil2 {
			*(x) = Log{}
		} else if yyct2 == codecSelferValueTypeMap2 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
			z.DecReadMapEnd()
		} else if yyct2 == codecSelferValueTypeArray2 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 != 0 {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
			z.DecReadArrayEnd()
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2)
		}
	}
}

func (x *Log) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "1":
			if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Address)
			} else {
				h.deccommon_Address((*pkg1_common.Address)(&x.Address), d)
			}
		case "2":
			h.decSlicecommon_Hash((*[]pkg1_common.Hash)(&x.Topics), d)
		case "3":
			x.Data = r.DecodeBytes(([]byte)(x.Data), false)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Log) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Address)
	} else {
		h.deccommon_Address((*pkg1_common.Address)(&x.Address), d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecommon_Hash((*[]pkg1_common.Hash)(&x.Topics), d)
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = z.DecCheckBreak()
	}
	if yyb10 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Data = r.DecodeBytes(([]byte)(x.Data), false)
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = z.DecCheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
}

func (x *Log) IsCodecEmpty() bool {
	return !(len(x.Address) != 0 && len(x.Topics) != 0 && len(x.Data) != 0 && true)
}

func (x Logs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		h.encLogs((Logs)(x), e)
	} // end block: if x slice == nil
}

func (x *Logs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	h.decLogs((*Logs)(x), d)
}

func (x codecSelfer2) encReceipts(v Receipts, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decReceipts(v *Receipts, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Receipt{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Receipt, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Receipt, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Receipt)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Receipt, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) enccommon_Address(v *pkg1_common.Address, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[20]byte)(v))[:])
}

func (x codecSelfer2) deccommon_Address(v *pkg1_common.Address, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[20]byte)(v))[:], true)
}

func (x codecSelfer2) encSlicecommon_Hash(v []pkg1_common.Hash, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &yyv1
		if !z.EncBinary() {
			z.EncTextMarshal(*yy2)
		} else {
			h.enccommon_Hash((*pkg1_common.Hash)(yy2), e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decSlicecommon_Hash(v *[]pkg1_common.Hash, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_common.Hash{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_common.Hash, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_common.Hash, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_common.Hash{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&yyv1[yyj1])
				} else {
					h.deccommon_Hash((*pkg1_common.Hash)(&yyv1[yyj1]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_common.Hash, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2) enccommon_Hash(v *pkg1_common.Hash, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[32]byte)(v))[:])
}

func (x codecSelfer2) deccommon_Hash(v *pkg1_common.Hash, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer2) encLogs(v Logs, e *codec1978.Encoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer2) decLogs(v *Logs, d *codec1978.Decoder) {
	var h codecSelfer2
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Log{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Log, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Log, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Log)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Log, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
